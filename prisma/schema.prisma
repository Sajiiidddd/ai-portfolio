generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String?   // optional name
  email     String    @unique
  image     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  comments  Comment[]
  votes     Vote[]

  @@index([email]) // faster lookups by email
}

model Blog {
  id          String     @id @default(cuid())
  title       String
  slug        String     @unique
  image     String? 
  content     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  comments    Comment[]
  votes       Vote[]

  @@index([slug]) // faster blog lookups by slug
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String
  blogId    String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([blogId])
}

model Vote {
  id        String   @id @default(cuid())
  type      VoteType
  createdAt DateTime @default(now())

  userId    String
  blogId    String

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId]) // one vote per user per blog
  @@index([blogId])
  @@index([userId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
