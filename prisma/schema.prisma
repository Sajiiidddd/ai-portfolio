
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Blog {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String
  content     String
  image       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  comments    Comment[]
  votes       Vote[]
}

model Comment {
  id        String   @id @default(cuid())
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  author    String
  content   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id        String   @id @default(cuid())
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  type      VoteType
  userId    String
  createdAt DateTime @default(now())

  @@unique([blogId, userId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}



enum RecType {
  MOVIE
  SONG
}

model Recommendation {
  id            String    @id @default(cuid())
  externalId    String
  type          RecType
  title         String
  subtitle      String
  imageUrl      String?
  year          String?
  recommendedBy String    @default("Anonymous")
  userId        String
  review        String    @db.VarChar(50)
  upvotes       Int       @default(0)
  downvotes     Int       @default(0)
  timestamp     BigInt
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  votes         RecommendationVote[]

  @@index([createdAt])
  @@index([upvotes])
  @@index([userId])
}

model RecommendationVote {
  id               String   @id @default(cuid())
  recommendationId String
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id], onDelete: Cascade)
  userId           String
  type             VoteType
  createdAt        DateTime @default(now())

  @@unique([recommendationId, userId], name: "recommendation_user_unique")
}




